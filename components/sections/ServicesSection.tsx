// components/sections/ServicesSection.tsx
'use client';

import { useState } from 'react';
import { motion } from 'framer-motion';
import { 
  Bot, 
  Database, 
  Brain, 
  Link2, 
  MessageSquare, 
  BarChart3, 
  Clock, 
  DollarSign,
  ArrowRight,
  CheckCircle,
  Star
} from 'lucide-react';
import { Card } from '@/components/ui/Card';
import { Button } from '@/components/ui/Button';
import { Badge } from '@/components/ui/Badge';
import { useIntersectionObserver } from '@/hooks/useIntersectionObserver';
import { useAppStore } from '@/store/useAppStore';

const serviceCategories = [
  { id: 'all', name: '–í—Å–µ —É—Å–ª—É–≥–∏', icon: 'üéØ' },
  { id: 'bots', name: '–ë–æ—Ç—ã', icon: 'ü§ñ' },
  { id: 'integration', name: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏', icon: 'üîó' },
  { id: 'parsing', name: '–ü–∞—Ä—Å–∏–Ω–≥', icon: 'üï∑Ô∏è' },
  { id: 'ai', name: 'AI —Ä–µ—à–µ–Ω–∏—è', icon: 'üß†' },
  { id: 'automation', name: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', icon: '‚ö°' },
];

const services = [
  {
    id: 'whatsapp-bot',
    category: 'bots',
    name: 'WhatsApp –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂',
    description: '–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ 24/7',
    price: '–æ—Ç 300,000 ‚Ç∏',
    timeline: '5-7 –¥–Ω–µ–π',
    roi: '+340% –∫ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏',
    popular: true,
    features: [
      '–ü—Ä–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤',
      '–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã',
      '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM –∏ 1–°',
      '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã',
      '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–º –∏ —Ä—É—Å—Å–∫–æ–º'
    ],
    icon: MessageSquare,
    demoType: 'whatsapp'
  },
  {
    id: 'telegram-bot',
    category: 'bots',
    name: 'Telegram –±–æ—Ç —Å AI',
    description: '–ú–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –∏ —Å–æ–æ–±—â–µ—Å—Ç–≤',
    price: '–æ—Ç 250,000 ‚Ç∏',
    timeline: '4-6 –¥–Ω–µ–π',
    roi: '+280% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
    features: [
      'AI —á–∞—Ç —Å GPT-4',
      '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏',
      '–°–∏—Å—Ç–µ–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏',
      '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏',
      '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å'
    ],
    icon: Bot,
    demoType: 'telegram'
  },
  {
    id: 'excel-automation',
    category: 'automation',
    name: 'Excel –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è',
    description: '–ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç—á–µ—Ç–∞–º–∏, —Ç–∞–±–ª–∏—Ü–∞–º–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ Excel',
    price: '–æ—Ç 150,000 ‚Ç∏',
    timeline: '3-5 –¥–Ω–µ–π',
    roi: '95% —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏',
    popular: true,
    features: [
      '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã',
      '–ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö',
      '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ email',
      '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö',
      '–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–æ–≤'
    ],
    icon: BarChart3,
    demoType: 'excel'
  },
  {
    id: 'kaspi-parser',
    category: 'parsing',
    name: 'Kaspi.kz –ø–∞—Ä—Å–µ—Ä',
    description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä —Ü–µ–Ω, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏ –æ—Ç–∑—ã–≤–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ —Å Kaspi.kz',
    price: '–æ—Ç 200,000 ‚Ç∏',
    timeline: '2-4 –¥–Ω—è',
    roi: '+200% —Å–∫–æ—Ä–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞',
    features: [
      '–°–±–æ—Ä —Ü–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
      '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞—Ç–∫–æ–≤',
      '–ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤',
      '–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel/CSV',
      '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö'
    ],
    icon: Database,
    demoType: 'kaspi'
  },
  {
    id: '1c-integration',
    category: 'integration',
    name: '1–° –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è',
    description: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è 1–° —Å —Å–∞–π—Ç–æ–º, CRM, —Å–∫–ª–∞–¥—Å–∫–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –∏ –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏',
    price: '–æ—Ç 500,000 ‚Ç∏',
    timeline: '7-14 –¥–Ω–µ–π',
    roi: '+450% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
    popular: true,
    features: [
      '–î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è',
      '–û–±–º–µ–Ω —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –∑–∞–∫–∞–∑–∞–º–∏',
      '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤',
      '–ö–æ–Ω—Ç—Ä–æ–ª—å –æ—Å—Ç–∞—Ç–∫–æ–≤',
      '–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞'
    ],
    icon: Link2,
    demoType: 'integration'
  },
  {
    id: 'ai-assistant',
    category: 'ai',
    name: 'AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –±–∏–∑–Ω–µ—Å–∞',
    description: '–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –±–∞–∑–µ GPT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π',
    price: '–æ—Ç 400,000 ‚Ç∏',
    timeline: '5-10 –¥–Ω–µ–π',
    roi: '+320% –∫ –ø—Ä–∏–±—ã–ª–∏',
    features: [
      '–ê–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö',
      '–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂',
      '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é',
      '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã',
      '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏'
    ],
    icon: Brain,
    demoType: 'ai'
  }
];

export const ServicesSection = () => {
  const [ref, isVisible] = useIntersectionObserver({ threshold: 0.1 });
  const { selectedServiceCategory, setSelectedServiceCategory } = useAppStore();

  const filteredServices = selectedServiceCategory === 'all' 
    ? services 
    : services.filter(service => service.category === selectedServiceCategory);

  const scrollToDemo = (demoType?: string) => {
    const element = document.querySelector('#demos');
    if (element) {
      element.scrollIntoView({ behavior: 'smooth' });
      // You could also set the active demo here if needed
    }
  };

  return (
    <section 
      id="services"
      ref={ref}
      className="py-20 bg-gray-50 dark:bg-gray-900/50 relative overflow-hidden"
    >
      {/* Background Effects */}
      <div className="absolute inset-0 opacity-30">
        <div className="absolute inset-0 bg-gradient-to-br from-primary-500/5 via-secondary-500/5 to-accent-500/5" />
        <div className="absolute inset-0 bg-cyber-grid bg-cyber-grid-size opacity-20" />
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={isVisible ? { opacity: 1, y: 0 } : {}}
          className="text-center mb-16"
        >
          <Badge variant="primary" size="lg" className="mb-6">
            <span className="mr-2">‚ö°</span>
            –ù–∞—à–∏ —É—Å–ª—É–≥–∏
          </Badge>
          <h2 className="text-4xl sm:text-5xl font-display font-bold mb-6">
            –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º <span className="bg-gradient-to-r from-primary-500 to-secondary-500 bg-clip-text text-transparent">–∏–¥–µ–∏</span> –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
          </h2>
          <p className="text-xl text-gray-600 dark:text-gray-400 max-w-3xl mx-auto">
            –ü–æ–ª–Ω—ã–π —Å–ø–µ–∫—Ç—Ä —É—Å–ª—É–≥ –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞ –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö –±–æ—Ç–æ–≤ –¥–æ —Å–ª–æ–∂–Ω—ã—Ö AI —Ä–µ—à–µ–Ω–∏–π
          </p>
        </motion.div>

        {/* Service Categories */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={isVisible ? { opacity: 1, y: 0 } : {}}
          transition={{ delay: 0.2 }}
          className="flex flex-wrap justify-center gap-4 mb-16"
        >
          {serviceCategories.map((category) => (
            <motion.button
              key={category.id}
              onClick={() => setSelectedServiceCategory(category.id)}
              className={`
                flex items-center space-x-2 px-6 py-3 rounded-2xl font-semibold transition-all duration-300
                ${selectedServiceCategory === category.id
                  ? 'bg-primary-500 text-white shadow-lg scale-105'
                  : 'bg-white dark:bg-gray-800 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 hover:scale-105'
                }
              `}
              whileHover={{ y: -2 }}
              whileTap={{ scale: 0.95 }}
            >
              <span>{category.icon}</span>
              <span>{category.name}</span>
            </motion.button>
          ))}
        </motion.div>

        {/* Services Grid */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={isVisible ? { opacity: 1, y: 0 } : {}}
          transition={{ delay: 0.4 }}
          className="grid md:grid-cols-2 lg:grid-cols-3 gap-8"
        >
          {filteredServices.map((service, index) => (
            <motion.div
              key={service.id}
              initial={{ opacity: 0, y: 30 }}
              animate={isVisible ? { opacity: 1, y: 0 } : {}}
              transition={{ delay: 0.1 * index }}
            >
              <Card 
                variant="gradient" 
                hover 
                className="h-full p-8 group relative overflow-hidden"
              >
                {/* Popular Badge */}
                {service.popular && (
                  <div className="absolute top-4 right-4">
                    <Badge variant="warning" size="sm" className="animate-pulse">
                      <Star className="w-3 h-3 mr-1" />
                      –•–ò–¢
                    </Badge>
                  </div>
                )}

                {/* Service Icon */}
                <div className="mb-6">
                  <div className="w-16 h-16 bg-gradient-to-br from-primary-500 to-secondary-500 rounded-2xl flex items-center justify-center mb-4 group-hover:scale-110 transition-transform">
                    <service.icon className="w-8 h-8 text-white" />
                  </div>
                </div>

                {/* Service Info */}
                <div className="mb-8">
                  <h3 className="text-2xl font-bold mb-4 text-gray-900 dark:text-white">
                    {service.name}
                  </h3>
                  <p className="text-gray-600 dark:text-gray-400 leading-relaxed mb-6">
                    {service.description}
                  </p>

                  {/* Features List */}
                  <ul className="space-y-2 mb-6">
                    {service.features.slice(0, 3).map((feature, idx) => (
                      <li key={idx} className="flex items-center text-sm text-gray-600 dark:text-gray-400">
                        <CheckCircle className="w-4 h-4 text-green-500 mr-2 flex-shrink-0" />
                        {feature}
                      </li>
                    ))}
                    {service.features.length > 3 && (
                      <li className="text-sm text-gray-500 dark:text-gray-500">
                        +{service.features.length - 3} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
                      </li>
                    )}
                  </ul>
                </div>

                {/* Pricing and Metrics */}
                <div className="space-y-4 mb-8">
                  <div className="grid grid-cols-2 gap-4">
                    <div className="p-3 bg-green-50 dark:bg-green-900/20 rounded-lg">
                      <DollarSign className="w-4 h-4 text-green-600 mb-1" />
                      <div className="text-sm font-medium text-green-700 dark:text-green-400">{service.price}</div>
                    </div>
                    <div className="p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                      <Clock className="w-4 h-4 text-blue-600 mb-1" />
                      <div className="text-sm font-medium text-blue-700 dark:text-blue-400">{service.timeline}</div>
                    </div>
                  </div>

                  <div className="p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg text-center">
                    <div className="text-sm font-medium text-purple-700 dark:text-purple-400">
                      ROI: {service.roi}
                    </div>
                  </div>
                </div>

                {/* Action Buttons */}
                <div className="space-y-3">
                  {service.demoType && (
                    <Button
                      variant="outline"
                      size="md"
                      className="w-full"
                      onClick={() => scrollToDemo(service.demoType)}
                    >
                      –°–º–æ—Ç—Ä–µ—Ç—å –¥–µ–º–æ
                    </Button>
                  )}
                  <Button
                    size="md"
                    className="w-full"
                    icon={<ArrowRight className="w-4 h-4" />}
                    onClick={() => {
                      const element = document.querySelector('#contact');
                      if (element) element.scrollIntoView({ behavior: 'smooth' });
                    }}
                  >
                    –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É
                  </Button>
                </div>

                {/* Hover Gradient */}
                <div className="absolute inset-0 bg-gradient-to-r from-primary-500/5 to-secondary-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none" />
              </Card>
            </motion.div>
          ))}
        </motion.div>

        {/* Bottom CTA */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={isVisible ? { opacity: 1, y: 0 } : {}}
          transition={{ delay: 0.6 }}
          className="text-center mt-16"
        >
          <Card className="inline-block p-8 bg-gradient-to-r from-primary-50 to-secondary-50 dark:from-primary-900/20 dark:to-secondary-900/20">
            <h3 className="text-2xl font-bold mb-4">–ù–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É? ü§î</h3>
            <p className="text-gray-600 dark:text-gray-400 mb-6 max-w-md">
              –†–∞–∑—Ä–∞–±–æ—Ç–∞—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–¥ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏. –û–±—Å—É–¥–∏–º –ø—Ä–æ–µ–∫—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ!
            </p>
            <Button 
              size="lg" 
              glow
              onClick={() => {
                const element = document.querySelector('#contact');
                if (element) element.scrollIntoView({ behavior: 'smooth' });
              }}
            >
              –û–±—Å—É–¥–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
            </Button>
          </Card>
        </motion.div>
      </div>
    </section>
  );
};